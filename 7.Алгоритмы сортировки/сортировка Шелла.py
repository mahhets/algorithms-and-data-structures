"""
Сортировка Шелла

Сложность: В худшем случае O(n**2)/ O(n(logn)**2) или O(n**(3/2))
Устойчивость: Неустойчивая (Если в массиве есть одинаковые элементы и нужно сохранить их порядок - не сохранит)
Категория: Вставками
Потребление помяти: Не требует доп.памяти
"""

"""
1. Выбираем шаг для сравнения элементов (increment)
2. Последовательно сравниваем элементы массива находящиеся один от другого на расстоянии шага
3. Уменьшаем шаг и повторяем пункт 2

Эффективность сортировки зависит от выбранного изначально шага

!!!!! Лучшая последовательность шагов, если в массиве до 4к элементов
!!!!!             1, 4, 10, 23, 57, 132, 301, 701, 1750
"""

import random

size = 10
array = [i for i in range(size)]
random.shuffle(array)
print(array)


def shell_sort(array):
    assert len(array) < 4000, 'Массив слишком большой'

    """
    Генератор для шага сортировки. Запоминает последнее значение
    """
    def new_increment(array):
         inc = [1, 4, 10, 23, 57, 132, 301, 701, 1750]

         while len(array) <= inc[-1]:
             inc.pop()

         while len(inc) > 0:
             yield inc.pop()

    for increment in new_increment(array): # Шаг, с которым обходим массив для сортировки
        for i in range(increment, len(array)): # Начинаем перебирать индексы начинает с инкремента и заканчивая len
            for j in range(i, increment - 1, - increment): # j будет уменьшаться и двигаться с шагом -increment
                if array[j - increment] <= array[j]: # делаем проверку
                    break
                array[j], array[j - increment] = array[j - increment], array[j] # если проверка не выполнена -> меняем элементы


shell_sort(array)
print(array)

