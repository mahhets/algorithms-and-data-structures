"""
Как работает список внутри интепретатора
"""

lst = []

lst.append(1)
lst.extend([2,3,4])

print(lst)

"""
При добавлении (append) в список помещается не число, а ссылка на число, если число уже хранится в памяти

При extend python выделил в памяти ячейки для хранения чисел 2,3,4, а в список поместил ссылки на эти объекты 
"""

lst.insert(5,1)

"""
Сначала python изменяет размер(зарезервированный) списка и далее начинает сдвигать адреса, в итоге в ячейку с индексом 1
он поместит ссылку на ячейку с числом 5
"""

lst.pop()

"""
Происходит уменьшение размера списка, последний элемент помещается в переменную last
Далее python меняет размер списка на n-1 и получается, что список еще хранит в себе ссылку на число 5,
но при этом считает, что она уже ему не нужна > физичеси ее там нет
"""

"""
ВЫВОДЫ:
    1. Время доступа к элементу списка - величина постоянная(не зависит от размера списка)
    2. Время на добавление одного элемента в конец списка - величина постоянная
    3. Время на вставку зависит от того, сколько элементов правее индекса вставки(чем ближе к концу - тем быстрее)
    4. Удаление элемента с конца списка происходит за константное время
        Но если в метод pop передаем индекс, то удаление будет сравнимо по времени со вставкой
"""